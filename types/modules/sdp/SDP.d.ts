/**
 * A class that translates the Jingle messages received from the signaling server into SDP format that the
 * browser understands and vice versa. This is needed for media session establishment and for signaling local and
 * remote sources across peers.
 */
export default class SDP {
    /**
     * Constructor.
     *
     * @param {string} sdp - The SDP generated by the browser when SDP->Jingle conversion is needed, an empty string
     * when Jingle->SDP conversion is needed.
     * @param {boolean} isP2P - Whether this SDP belongs to a p2p peerconnection.
     */
    constructor(sdp: string, isP2P?: boolean);
    isP2P: boolean;
    raw: any;
    failICE: boolean;
    removeTcpCandidates: boolean;
    removeUdpCandidates: boolean;
    /**
     * Adjusts the msid semantic for a remote source based on the media type and the index of the m-line.
     * This is needed for browsers that need both the streamId and trackId to be reported in the msid attribute.
     *
     * @param {String} msid - The msid attribute value.
     * @param {Number} idx - The index of the m-line in the SDP.
     * @returns {String} - The adjusted msid semantic.
     */
    _adjustMsidSemantic(msid: string, mediaType: any, idx: number): string;
    /**
     * Updates the media and session sections of the SDP based on the raw SDP string.
     *
     * @param {string} sdp - The SDP generated by the browser.
     * @returns {void}
     * @private
     */
    private _updateSessionAndMediaSections;
    session: any;
    media: any;
    /**
     * Adds or removes the sources from the SDP.
     *
     * @param {Object} sourceMap - The map of the sources that are being added/removed.
     * @param {boolean} isAdd - Whether the sources are being added or removed.
     * @returns {Array<number>} - The indices of the new m-lines that were added/modifed in the SDP.
     */
    updateRemoteSources(sourceMap: any, isAdd?: boolean): Array<number>;
    /**
     * Adds a new m-line to the description so that a new local or remote source can be added to the conference.
     *
     * @param {MediaType} mediaType media type of the new source that is being added.
     * @returns {void}
     */
    addMlineForNewSource(mediaType: MediaType, isRemote?: boolean): void;
    /**
     * Converts the Jingle message element to SDP.
     *
     * @param {*} jingle - The Jingle message element.
     * @returns {void}
     */
    fromJingle(jingle: any): void;
    /**
     * Returns an SSRC Map by extracting SSRCs and SSRC groups from all the m-lines in the SDP.
     *
     * @returns {*}
     */
    getMediaSsrcMap(): any;
    /**
     * Converts the content section from Jingle to a media section that can be appended to the SDP.
     *
     * @param {*} content - The content section from the Jingle message element.
     * @returns {*} - The constructed media sections.
     */
    jingle2media(content: any): any;
    /**
     * Coverts the RTCP attributes for the session from XMPP format to SDP.
     * https://xmpp.org/extensions/xep-0293.html
     *
     * @param {*} elem - Jingle message element.
     * @param {*} payloadtype - Payload type for the codec.
     * @returns {string}
     */
    rtcpFbFromJingle(elem: any, payloadtype: any): string;
    /**
     * Converts the RTCP attributes for the session from SDP to XMPP format.
     * https://xmpp.org/extensions/xep-0293.html
     *
     * @param {*} mediaIndex - The index of the media section in the SDP.
     * @param {*} elem - The Jingle message element.
     * @param {*} payloadtype - payload type for the codec.
     */
    rtcpFbToJingle(mediaIndex: any, elem: any, payloadtype: any): void;
    /**
     * Converts the current SDP to a Jingle message that can be sent over the wire to a signaling server.
     *
     * @param {*} elem - The Jingle message element.
     * @param {*} thecreator - Sender role, whether it is an 'initiator' or 'responder'.
     * @returns - The updated Jingle message element.
     */
    toJingle(elem: any, thecreator: any): any;
    /**
     * Converts the session transport information from SDP to XMPP format.
     *
     * @param {*} mediaIndex The index for the m-line in the SDP.
     * @param {*} elem The transport element.
     */
    transportToJingle(mediaIndex: any, elem: any): void;
}
import { MediaType } from '../../service/RTC/MediaType';
